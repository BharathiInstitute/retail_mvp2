import 'package:flutter/material.dart';
import 'dart:ui' as ui;
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'firebase_options.dart';
import 'app_shell.dart';

Future<void> main() async {
  // Ensure bindings are initialized before calling native code.
  WidgetsFlutterBinding.ensureInitialized();

  // Soften known web plugin race conditions (e.g., cloud_firestore_web snapshot
  // unsubscribe called before subscribe during rapid route changes like logout).
  // We handle only very specific messages to avoid masking real errors.
  FlutterError.onError = (FlutterErrorDetails details) {
    final msg = details.exception.toString();
    if (_isBenignWebFirestoreUnsubscribeError(msg)) {
      // ignore benign error
      // Optionally log: debugPrint('[ignored] $msg');
      return;
    }
    FlutterError.presentError(details);
  };
  ui.PlatformDispatcher.instance.onError = (Object error, StackTrace stack) {
    final msg = error.toString();
    if (_isBenignWebFirestoreUnsubscribeError(msg)) {
      // swallow to prevent UI freeze in dev
      return true;
    }
    return false; // allow default handling
  };

  // Initialize Firebase using options provided by FlutterFire.
  // The file `firebase_options.dart` is generated by running:
  //   dart pub global run flutterfire_cli:flutterfire configure
  // Until then, a temporary stub is present to keep analysis passing.
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Firestore offline persistence and cache sizing
  // Do not call enablePersistence (deprecated). Configure persistence via settings below.
  try {
    // Configure persistence through settings (supported on mobile/desktop; disabled on web).
    FirebaseFirestore.instance.settings = Settings(
      persistenceEnabled: !kIsWeb,
      cacheSizeBytes: 50 * 1024 * 1024, // 50 MB cap
    );
  } catch (_) {
    // Ignore if not supported on current platform
  }

  // Ensure an authenticated session (anonymous) so Firestore rules that
  // require authentication can be satisfied without a full auth flow yet.
  try {
    final auth = FirebaseAuth.instance;
    if (auth.currentUser == null) {
      await auth.signInAnonymously();
    }
    // Debug: log project and user to help diagnose rule failures.
    final app = Firebase.app();
    // These prints appear in your debug console.
    // If uid is null, enable Anonymous in Firebase Console.
    // If projectId is unexpected, regenerate firebase_options.dart.
    // ignore: avoid_print
    print('[Firebase] projectId=${app.options.projectId}');
    // ignore: avoid_print
    print('[Auth] uid=${auth.currentUser?.uid} (isAnonymous=${auth.currentUser?.isAnonymous})');
  } catch (_) {
    // Non-fatal: UI can still load; Firestore writes may fail until signed in.
  }

  // Startup seeding removed.

  runApp(const ProviderScope(child: MyApp()));
}

bool _isBenignWebFirestoreUnsubscribeError(String message) {
  // cloud_firestore_web occasionally throws when a listener is cancelled while
  // being set up. Depending on the version, this shows up as:
  // - JS error around onSnapshotUnsubscribe.callAsFunction/callAsFunction
  // - Errors mentioning _createSnapshotStream
  // - LateInitializationError: Field 'controller' has not been initialized
  // We match conservatively and only swallow when clearly tied to firestore web.
  final m = message.toLowerCase();
  final looksLikeFirestore = m.contains('cloud_firestore_web') || m.contains('firestore') || m.contains('interop/firestore.dart');
  if (!looksLikeFirestore) return false;
  if (m.contains('onsnapshotunsubscribe') || m.contains('callasfunction') || m.contains('_createsnapshotstream')) return true;
  if (m.contains('lateinitializationerror') && m.contains('controller') && m.contains('snapshot')) return true;
  return false;
}
